@mixin make-container() {
  width: 100%;
  padding-right: calc($container-gutter-width / 2);
  padding-left: calc($container-gutter-width / 2);
  margin-right: auto;
  margin-left: auto;
}
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @if map-has-key($container-max-width, "max-width") {
        $width: map-get($container-max-width, "max-width");
        @if map-has-key($container-max-width, "gutter-widths") {
          $width: calc(map-get($container-max-width, "max-width") + map-get($container-max-width, "gutter-widths") * 2);
        }

        max-width: $width;
      }
      @if map-has-key($container-max-width, "gutter-widths") {
        padding-left: map-get($container-max-width, "gutter-widths");
        padding-right: map-get($container-max-width, "gutter-widths");
      }
    }
  }
}
@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    width: 100%;
    min-height: 1px; // Prevent columns from collapsing when empty
    padding-right: calc($gutter / 2);
    padding-left: calc($gutter / 2);
  }
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .l-grid__col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }
    .l-grid__col#{$infix},
    .l-grid__col#{$infix}-auto {
      @extend %grid-column;
    }
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.l-grid__col-{bp}` classes for equal-width flexbox columns
      .l-grid__col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      .l-grid__col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: none; // Reset earlier grid tiers
      }
      @for $i from 1 through $columns {
        .l-grid__col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      .l-grid__col#{$infix}_order-first {
        order: -1;
      }

      .l-grid__col#{$infix}_order-last {
        order: $columns + 1;
      }
      @for $i from 0 through $columns {
        .l-grid__col#{$infix}_order-#{$i} {
          order: $i;
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
          .l-grid__col#{$infix}_offset-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }
}
@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
  margin-right: calc($grid-gutter-width / -2);
  margin-left: calc($grid-gutter-width / -2);
}
@mixin make-col-ready() {
  position: relative;

  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  min-height: 1px; // Prevent collapsing
  padding-right: calc($grid-gutter-width / 2);
  padding-left: calc($grid-gutter-width / 2);

  &.l-grid_p {
    padding-top: calc($grid-gutter-width / 2);
    padding-bottom: calc($grid-gutter-width / 2);
  }
}
@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage(calc($size / $columns));

  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage(calc($size / $columns));
}
@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: calc($size / $columns);

  margin-left: if($num == 0, 0, percentage($num));
}
